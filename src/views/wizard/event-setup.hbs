{{! src/views/wizard/event-setup.hbs }}
{{! Event setup view with dynamic menu form }}

{{! 🟡🟡🟡 - [STYLESHEET] Event setup specific styles }}
<link rel="stylesheet" href="/public/global/css/event__setup.css">

<div class="event-setup-container">
    <h3>Customize Your Menu</h3>
    
    {{#if menuError}}
        <div class="error-message">
            <p>⚠️⚠️⚠️ - [EVENT SETUP] {{menuError}}</p>
            <p>Please try refreshing the page or contact support.</p>
        </div>
    {{/if}}

    {{#unless hasMenuData}}
        <div class="loading-message">
            <p>🟡🟡🟡 - [EVENT SETUP] Loading menu options...</p>
        </div>
    {{/unless}}

    {{#if hasMenuData}}
        <form id="eventSetupForm" class="menu-form">

            {{! 🟡🟡🟡 - [MENU SECTIONS] Render each menu section in order }}
            {{#each menuSections}}
                <div class="menu-section {{className}}" data-section-id="{{id}}" data-order="{{order}}">
                    {{! 🟡🟡🟡 - [SECTION HEADERS] Handle h1, h2, p elements }}
                    {{#if (eq htmlType "h1")}}
                        <h1 class="section-title">{{content}}</h1>
                    {{else if (eq htmlType "h2")}}
                        <h2 class="section-title">{{content}}</h2>
                    {{else if (eq htmlType "p")}}
                        <p class="section-content">{{content}}</p>
                    {{/if}}

                    {{! 🟡🟡🟡 - [IMAGES] Handle image elements }}
                    {{#if (eq htmlType "image")}}
                        <div class="image-section">
                            <img src="{{content.src}}" alt="{{content.alt}}" class="menu-image">
                            {{#if content.caption}}
                                <p class="image-caption">{{content.caption}}</p>
                            {{/if}}
                        </div>
                    {{/if}}

                    {{! 🟡🟡🟡 - [UNORDERED LISTS] Handle unordered list elements }}
                    {{#if (eq htmlType "unordered-list")}}
                        <ul class="menu-list">
                            {{#each content}}
                                <li>{{this}}</li>
                            {{/each}}
                        </ul>
                    {{/if}}

                    {{! 🟡🟡🟡 - [RADIO GROUPS] Handle radio button groups }}
                    {{#if (eq htmlType "radio-group")}}
                        <div class="radio-group" data-group-name="{{id}}">
                            {{#each content}}
                                <div class="radio-option contracted" data-option-id="{{@key}}">
                                    <label class="radio-label">
                                        <input type="radio" name="{{../id}}" value="{{@key}}" class="radio-input">
                                        <div class="radio-custom"></div>
                                        <span class="radio-text">
                                            <strong>{{label}}</strong>
                                            {{#if description}}
                                                <span class="description">{{description}}</span>
                                            {{/if}}
                                            {{#if price}}
                                                <span class="price">AED {{price}}
                                                {{#if price-basis}}
                                                    <span class="price-basis">({{price-basis}})</span>
                                                {{/if}}
                                                </span>
                                            {{/if}}
                                        </span>
                                    </label>
                                    
                                    {{! 🟡🟡🟡 - [POPUP BUTTON] Show details button if popup exists - hidden by default in contracted mode }}
                                    {{#if popup}}
                                        <button type="button" class="view-details-btn" data-popup-target="{{@key}}" style="display: none;">
                                            View Details
                                        </button>
                                    {{/if}}
                                </div>
                            {{/each}}
                        </div>
                    {{/if}}

                    {{! 🟡🟡🟡 - [PRODUCT GROUPS] Handle individual products with quantity counters }}
                    {{#if (eq htmlType "product-group")}}
                        <div class="product-group" data-group-name="{{id}}">
                            {{#each content}}
                                <div class="product-item" data-product-id="{{@key}}">
                                    <div class="product-info">
                                        <label class="product-label">
                                            <strong>{{label}}</strong>
                                            {{#if price}}
                                                <span class="price">AED {{price}}
                                                {{#if price-basis}}
                                                    <span class="price-basis">({{price-basis}})</span>
                                                {{/if}}
                                                </span>
                                            {{/if}}
                                        </label>
                                    </div>
                                    <div class="quantity-controls">
                                        <button type="button" class="quantity-btn minus" data-action="decrease">-</button>
                                        <input type="number" class="quantity-input" name="{{@key}}" value="0" min="0" max="999">
                                        <button type="button" class="quantity-btn plus" data-action="increase">+</button>
                                    </div>
                                </div>
                            {{/each}}
                        </div>
                    {{/if}}

                    {{! 🟡🟡🟡 - [CHECKBOX GROUPS] Handle checkbox groups }}
                    {{#if (eq htmlType "checkbox-group")}}
                        <div class="checkbox-group" data-group-name="{{id}}">
                            {{#each content}}
                                <div class="checkbox-option" data-option-id="{{@key}}">
                                    <label class="checkbox-label">
                                        <input type="checkbox" name="{{@key}}" value="{{@key}}" class="checkbox-input">
                                        <span class="checkbox-text">
                                            <strong>{{label}}</strong>
                                            {{#if price}}
                                                <span class="price">AED {{price}}
                                                {{#if price-basis}}
                                                    <span class="price-basis">({{price-basis}})</span>
                                                {{/if}}
                                                </span>
                                            {{/if}}
                                        </span>
                                    </label>
                                    
                                    {{! 🟡🟡🟡 - [POPUP BUTTON] Show details button if popup exists }}
                                    {{#if popup}}
                                        <button type="button" class="view-details-btn" data-popup-target="{{@key}}">
                                            View Details
                                        </button>
                                    {{/if}}
                                </div>
                            {{/each}}
                        </div>
                    {{/if}}
                </div>
            {{/each}}

            {{! 🟡🟡🟡 - KLOI GUEST COUNTER - Will be positioned after first image via JavaScript }}
            <div id="guest-counter-container" style="display: none;">
                <div class="product-item" data-product-id="guest-count">
                    <div class="product-info">
                        <label class="product-label">
                            <strong>Your Guest Count</strong>
                        </label>
                    </div>
                    <div class="quantity-controls">
                        <button type="button" class="quantity-btn minus" data-action="decrease">-</button>
                        <input type="number" class="quantity-input" name="guest-count" value="0" min="0" max="999">
                        <button type="button" class="quantity-btn plus" data-action="increase">+</button>
                    </div>
                </div>
            </div>

            <div id="koi-live-quote">
                <div class="kloi-calculator"></div>
            </div>

            {{! 🟡🟡🟡 - [FORM SUBMISSION] Submit section }}
            <div class="submit-section">
                <button type="submit" id="submitButton" class="submit-btn">
                    <span class="summary" id="orderSummary">Please select your menu items</span>
                    <span class="confirm-text">Continue to Summary</span>
                </button>
            </div>
        </form>
    {{/if}}
</div>

{{! 🟡🟡🟡 - [HIDDEN DATA] Server-side data for JavaScript }}
<div id="serverData" data-menu-sections="{{menuSectionsJson}}" style="display: none;"></div>

{{! 🟡🟡🟡 - [POPUP MODAL] Modal for displaying popup content }}
<div id="popupModal" class="popup-modal">
    <div class="popup-content">
        <span class="popup-close">&times;</span>
        <div id="popupBody" class="popup-body">
            {{! Popup content will be dynamically inserted here }}
        </div>
    </div>
</div>



{{! 🟡🟡🟡 - [JAVASCRIPT] Event setup functionality }}
<script src="/public/global/js/kloi_calculator.js"></script>
<script>
// 🟡🟡🟡 - [POPUP DATA] Server-side popup data will be loaded from data attribute

// 🟡🟡🟡 - [EVENT SETUP JS] Main JavaScript for event setup page
document.addEventListener('DOMContentLoaded', function() {
    console.log('🟡🟡🟡 - [EVENT SETUP JS] Event setup page loaded');
    
    // 🟡🟡🟡 - [FORM ELEMENTS] Get form elements
    const form = document.getElementById('eventSetupForm');
    const submitBtn = document.getElementById('submitButton');
    const summarySpan = document.getElementById('orderSummary');
    const popupModal = document.getElementById('popupModal');
    const popupBody = document.getElementById('popupBody');
    const popupClose = document.querySelector('.popup-close');
    
    // 🟡🟡🟡 - [POPUP DATA] Store popup content data
    const popupData = {};

    // 🟡🟡🟡 - [KLOI CALC] Initialize calculator early from server data
    const serverDataDiv = document.getElementById('serverData');
    const menuSectionsData = serverDataDiv?.dataset.menuSections;
    let calc = null;
    if (menuSectionsData && window.KloiCalculator) {
        console.log('🟡🟡🟡 - [EVENT SETUP JS] Initializing KLOI calculator with server menu data');
        calc = window.KloiCalculator.initFromMenuSections(menuSectionsData, { taxPercent: 0 });
        if (!calc) {
            console.error('❗❗❗ - [EVENT SETUP JS] Calculator failed to initialize');
        }
    } else {
        console.error('❗❗❗ - [EVENT SETUP JS] Missing menu data or calculator module');
    }
    
    // 🟡🟡🟡 - [POPUP INITIALIZATION] Initialize popup data from server data
    function initializePopupData() {
        console.log('🟡🟡🟡 - [EVENT SETUP JS] Initializing popup data from server');
        
        // 🟡🟡🟡 - [SERVER DATA] Get server data from hidden div
        if (menuSectionsData) {
            try {
                const serverPopupData = JSON.parse(menuSectionsData);
                console.log('🟡🟡🟡 - [EVENT SETUP JS] Parsed server data:', serverPopupData.length, 'sections');
                
                // 🟡🟡🟡 - [SERVER DATA] Process server-side popup data
                serverPopupData.forEach(section => {
                    // 🟡🟡🟡 - [POPUP PROCESSING] Check if this section has content with popups
                    if (section.content && typeof section.content === 'object') {
                        Object.entries(section.content).forEach(([optionKey, optionData]) => {
                            // 🟡🟡🟡 - [POPUP CHECK] Check if this option has popup data
                            if (optionData && typeof optionData === 'object' && optionData.popup) {
                                const popupKey = `${section.id}.${optionKey}`;
                                popupData[popupKey] = {
                                     // 🟡🟡🟡 Use "label" value from JSONB if available
                                    title: optionData.label || optionKey,
                                    content: optionData.popup
                                };
                                console.log('🟡🟡🟡 - [EVENT SETUP JS] Found popup for:', popupKey);
                            }
                        });
                    }
                });
            } catch (error) {
                console.error('❗❗❗ - [EVENT SETUP JS] Error parsing server data:', error);
            }
        }
        
        // 🟡🟡🟡 - [DOM ELEMENTS] Add click handlers to popup buttons
        const popupButtons = document.querySelectorAll('.view-details-btn');
        popupButtons.forEach(btn => {
            const popupTarget = btn.dataset.popupTarget;
            const section = btn.closest('.menu-section');
            const sectionId = section.dataset.sectionId;
            const popupKey = `${sectionId}.${popupTarget}`;
            
            btn.addEventListener('click', () => showPopup(popupKey));
        });
        
        console.log('✅✅✅ - [EVENT SETUP JS] Popup data initialized:', Object.keys(popupData).length, 'popups');
    }
    
    // 🟡🟡🟡 - [POPUP DISPLAY] Show popup modal
    function showPopup(popupKey) {
        console.log('🟡🟡🟡 - [EVENT SETUP JS] Showing popup for:', popupKey);
        
        const popup = popupData[popupKey];
        if (popup) {
            // 🟡🟡🟡 - [POPUP RENDERING] Render popup content based on structure
            let popupHTML = `<h3>${popup.title}</h3>`;
            
            if (typeof popup.content === 'object') {
                // 🟡🟡🟡 - [STRUCTURED CONTENT] Handle structured popup content
                Object.entries(popup.content).forEach(([sectionKey, sectionData]) => {
                    console.log('🟡🟡🟡 - [EVENT SETUP JS] Rendering popup section:', sectionKey, sectionData);
                    
                    if (sectionData['html-type'] === 'image') {
                        popupHTML += `
                            <div class="popup-image">
                                <img src="${sectionData.src}" alt="${sectionData.alt || ''}" style="max-width: 100%; height: auto;">
                                ${sectionData.caption ? `<p class="popup-caption">${sectionData.caption}</p>` : ''}
                            </div>
                        `;
                    } else if (sectionData['html-type'] === 'p') {
                        popupHTML += `<p>${sectionData.content}</p>`;
                    } else if (sectionData['html-type'] === 'unordered-list') {
                        popupHTML += `
                            <ul>
                                ${sectionData.content.map(item => `<li>${item}</li>`).join('')}
                            </ul>
                        `;
                    }
                });
            } else {
                // 🟡🟡🟡 - [SIMPLE CONTENT] Handle simple string content
                popupHTML += `<div>${popup.content}</div>`;
            }
            
            popupBody.innerHTML = popupHTML;
            popupModal.style.display = 'block';
        }
    }
    
    // 🟡🟡🟡 - [POPUP CLOSE] Close popup modal
    function closePopup() {
        console.log('🟡🟡🟡 - [EVENT SETUP JS] Closing popup');
        popupModal.style.display = 'none';
    }
    
    // 🟡🟡🟡 - [QUANTITY CONTROLS] Handle quantity buttons
    function initializeQuantityControls() {
        console.log('🟡🟡🟡 - [EVENT SETUP JS] Initializing quantity controls');
        
        const quantityBtns = document.querySelectorAll('.quantity-btn');
        quantityBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                const action = this.dataset.action;
                const input = this.parentNode.querySelector('.quantity-input');
                let value = parseInt(input.value) || 0;
                
                if (action === 'increase') {
                    value++;
                } else if (action === 'decrease' && value > 0) {
                    value--;
                }
                
                input.value = value;
                updateOrderSummary();

                // 🟡🟡🟡 - [KLOI CALC] Reflect changes into calculator
                if (calc) {
                    const productEl = this.closest('.product-item');
                    if (productEl && productEl.dataset.productId === 'guest-count') {
                        calc.setGuestCount(value);
                    } else {
                        const productKey = input.name;
                        calc.setProductQty(productKey, value);
                    }
                }
            });
        });
        
        // 🟡🟡🟡 - [QUANTITY INPUT] Handle direct input changes
        const quantityInputs = document.querySelectorAll('.quantity-input');
        quantityInputs.forEach(input => {
            input.addEventListener('change', function() {
                updateOrderSummary();
                if (calc) {
                    const productEl = this.closest('.product-item');
                    const value = parseInt(this.value) || 0;
                    if (productEl && productEl.dataset.productId === 'guest-count') {
                        calc.setGuestCount(value);
                    } else {
                        calc.setProductQty(this.name, value);
                    }
                }
            });
        });
        
        console.log('✅✅✅ - [EVENT SETUP JS] Quantity controls initialized');
    }
    
    // 🟡🟡🟡 - [ORDER SUMMARY] Update order summary display
    function updateOrderSummary() {
        console.log('🟡🟡🟡 - [EVENT SETUP JS] Updating order summary');
        
        let totalItems = 0;
        let selectedOptions = [];
        
        // 🟡🟡🟡 - [COUNT RADIO SELECTIONS] Count selected radio options
        const selectedRadios = document.querySelectorAll('input[type="radio"]:checked');
        selectedRadios.forEach(radio => {
            const option = radio.closest('.radio-option');
            const label = option.querySelector('strong');
            if (label) {
                selectedOptions.push(label.textContent);
                totalItems++;
            }
        });
        
        // 🟡🟡🟡 - [COUNT CHECKBOX SELECTIONS] Count selected checkboxes
        const selectedCheckboxes = document.querySelectorAll('input[type="checkbox"]:checked');
        selectedCheckboxes.forEach(checkbox => {
            const option = checkbox.closest('.checkbox-option');
            const label = option.querySelector('strong');
            if (label) {
                selectedOptions.push(label.textContent);
                totalItems++;
            }
        });
        
        // 🟡🟡🟡 - [COUNT PRODUCT QUANTITIES] Count product quantities
        const quantityInputs = document.querySelectorAll('.quantity-input');
        quantityInputs.forEach(input => {
            const quantity = parseInt(input.value) || 0;
            if (quantity > 0) {
                const product = input.closest('.product-item');
                const label = product.querySelector('strong');
                if (label) {
                    selectedOptions.push(`${label.textContent} (${quantity})`);
                    totalItems += quantity;
                }
            }
        });
        
        // 🟡🟡🟡 - [UPDATE SUMMARY] Update summary text
        if (totalItems === 0) {
            summarySpan.textContent = 'Please select your menu items';
        } else if (totalItems === 1) {
            summarySpan.textContent = `1 item selected: ${selectedOptions[0]}`;
        } else {
            summarySpan.textContent = `${totalItems} items selected`;
        }
        
        console.log('✅✅✅ - [EVENT SETUP JS] Order summary updated:', totalItems, 'items');
    }
    
    // 🟡🟡🟡 - [FORM SUBMISSION] Handle form submission
    function initializeFormSubmission() {
        console.log('🟡🟡🟡 - [EVENT SETUP JS] Initializing form submission');
        
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            console.log('🟡🟡🟡 - [EVENT SETUP JS] Form submission started');
            
            // 🟡🟡🟡 - [FORM DATA] Collect form data
            const formData = {
                radioSelections: {},
                checkboxSelections: {},
                productQuantities: {}
            };
            
            // 🟡🟡🟡 - [COLLECT RADIO SELECTIONS] Get selected radio options
            const selectedRadios = document.querySelectorAll('input[type="radio"]:checked');
            selectedRadios.forEach(radio => {
                const groupName = radio.name;
                formData.radioSelections[groupName] = radio.value;
            });
            
            // 🟡🟡🟡 - [COLLECT CHECKBOX SELECTIONS] Get selected checkboxes
            const selectedCheckboxes = document.querySelectorAll('input[type="checkbox"]:checked');
            selectedCheckboxes.forEach(checkbox => {
                formData.checkboxSelections[checkbox.name] = checkbox.value;
            });
            
            // 🟡🟡🟡 - [COLLECT PRODUCT QUANTITIES] Get product quantities
            const quantityInputs = document.querySelectorAll('.quantity-input');
            quantityInputs.forEach(input => {
                const quantity = parseInt(input.value) || 0;
                if (quantity > 0) {
                    formData.productQuantities[input.name] = quantity;
                }
            });
            
            console.log('🟡🟡🟡 - [EVENT SETUP JS] Form data collected:', formData);
            
            // 🟡🟡🟡 - [SUBMIT TO API] Submit to API endpoint
            try {
                submitBtn.disabled = true;
                submitBtn.textContent = 'Processing...';
                
                const response = await fetch('/api/session/event', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    console.log('✅✅✅ - [EVENT SETUP JS] Form submitted successfully');
                    window.location.href = result.nextStep;
                } else {
                    console.error('❗❗❗ - [EVENT SETUP JS] Form submission failed:', result.message);
                    alert('Error: ' + result.message);
                }
                
            } catch (error) {
                console.error('❌❌❌ - [EVENT SETUP JS] Form submission error:', error);
                alert('An error occurred. Please try again.');
            } finally {
                submitBtn.disabled = false;
                submitBtn.innerHTML = '<span class="summary" id="orderSummary">Review your selections</span><span class="confirm-text">Continue to Summary</span>';
            }
        });
        
        console.log('✅✅✅ - [EVENT SETUP JS] Form submission initialized');
    }
    
    // 🟡🟡🟡 - [RADIO CONTRACTION] Handle radio group contraction/expansion
    function initializeRadioContraction() {
        console.log('🟡🟡🟡 - [EVENT SETUP JS] Initializing radio contraction functionality');
        
        // 🟡🟡🟡 - [RADIO GROUPS] Get all radio groups
        const radioGroups = document.querySelectorAll('.radio-group');
        
        radioGroups.forEach(group => {
            const radioOptions = group.querySelectorAll('.radio-option');
            
            radioOptions.forEach(option => {
                const radioInput = option.querySelector('.radio-input');
                const viewDetailsBtn = option.querySelector('.view-details-btn');
                
                // 🟡🟡🟡 - [RADIO CHANGE] Handle radio selection
                radioInput.addEventListener('change', function() {
                    if (this.checked) {
                        console.log('🟡🟡🟡 - [EVENT SETUP JS] Radio selected:', this.value);
                        
                        // 🟡🟡🟡 - [CONTRACT OTHERS] Contract all other options in the same group
                        radioOptions.forEach(otherOption => {
                            if (otherOption !== option) {
                                otherOption.classList.remove('expanded');
                                otherOption.classList.add('contracted');
                                
                                // 🟡🟡🟡 - [HIDE BUTTONS] Hide view details buttons for contracted options
                                const otherBtn = otherOption.querySelector('.view-details-btn');
                                if (otherBtn) {
                                    otherBtn.style.display = 'none';
                                }
                            }
                        });
                        
                        // 🟡🟡🟡 - [EXPAND SELECTED] Expand the selected option
                        option.classList.remove('contracted');
                        option.classList.add('expanded');
                        
                        // 🟡🟡🟡 - [SHOW BUTTON] Show view details button if it exists
                        if (viewDetailsBtn) {
                            viewDetailsBtn.style.display = 'inline-block';
                        }
                        
                        console.log('✅✅✅ - [EVENT SETUP JS] Radio option expanded:', this.value);

                        // 🟡🟡🟡 - [KLOI CALC] Reflect radio into calculator
                        if (calc) {
                            const groupId = this.name; // matches section id
                            const optionKey = this.value;
                            calc.setRadio(groupId, optionKey);
                        }
                    }
                });
            });
        });
        
        console.log('✅✅✅ - [EVENT SETUP JS] Radio contraction functionality initialized');
    }
    
    // 🟡🟡🟡 - [EVENT LISTENERS] Initialize all event listeners
    function initializeEventListeners() {
        console.log('🟡🟡🟡 - [EVENT SETUP JS] Initializing event listeners');
        
        // 🟡🟡🟡 - [POPUP CLOSE] Close popup when clicking close button or outside
        popupClose.addEventListener('click', closePopup);
        popupModal.addEventListener('click', function(e) {
            if (e.target === popupModal) {
                closePopup();
            }
        });
        
        // 🟡🟡🟡 - [FORM CHANGES] Update summary when form changes
        const formInputs = document.querySelectorAll('input[type="radio"], input[type="checkbox"]');
        formInputs.forEach(input => {
            input.addEventListener('change', function () {
                updateOrderSummary();
                if (!calc) return;
                if (this.type === 'checkbox') {
                    const optionKey = this.value;
                    calc.setCheckbox(optionKey, this.checked);
                }
                if (this.type === 'radio' && this.checked) {
                    const groupId = this.name;
                    const optionKey = this.value;
                    calc.setRadio(groupId, optionKey);
                }
            });
        });
        
        console.log('✅✅✅ - [EVENT SETUP JS] Event listeners initialized');
    }
    
    // 🟡🟡🟡 - [GUEST COUNTER POSITIONING] Position guest counter after first image
    function positionGuestCounter() {
        console.log('🟡🟡🟡 - [EVENT SETUP JS] Positioning guest counter after first image');
        
        const firstImage = document.querySelector('.menu-image');
        const guestCounterContainer = document.getElementById('guest-counter-container');
        
        if (firstImage && guestCounterContainer) {
            // 🟡🟡🟡 - [POSITIONING] Insert guest counter after the first image's parent container
            const imageSection = firstImage.closest('.image-section');
            if (imageSection) {
                imageSection.parentNode.insertBefore(guestCounterContainer, imageSection.nextSibling);
                guestCounterContainer.style.display = 'block';
                console.log('✅✅✅ - [EVENT SETUP JS] Guest counter positioned after first image');
            }
        } else {
            console.log('🟡🟡🟡 - [EVENT SETUP JS] No first image or guest counter container found');
        }
    }
    
    // 🟡🟡🟡 - [INITIALIZATION] Initialize all functionality
    function initialize() {
        console.log('🟡🟡🟡 - [EVENT SETUP JS] Initializing event setup page');
        
        initializePopupData();
        initializeQuantityControls();
        initializeRadioContraction();
        initializeFormSubmission();
        initializeEventListeners();
        updateOrderSummary();
        positionGuestCounter();

        // 🟡🟡🟡 - [KLOI CALC] Seed initial selections into calculator
        if (calc) {
            // Guest count
            const guestInput = document.querySelector('#guest-counter-container .quantity-input[name="guest-count"]');
            if (guestInput) {
                calc.setGuestCount(parseInt(guestInput.value) || 0);
            }
            // Radios
            const selectedRadios = document.querySelectorAll('input[type="radio"]:checked');
            selectedRadios.forEach(r => calc.setRadio(r.name, r.value));
            // Checkboxes
            const selectedCheckboxes = document.querySelectorAll('input[type="checkbox"]:checked');
            selectedCheckboxes.forEach(cb => calc.setCheckbox(cb.value, true));
            // Products
            const productInputs = document.querySelectorAll('.product-group .quantity-input');
            productInputs.forEach(pi => calc.setProductQty(pi.name, parseInt(pi.value) || 0));
            calc.recalc();
        }
        
        console.log('✅✅✅ - [EVENT SETUP JS] Event setup page initialized');
    }
    
    // 🟡🟡🟡 - [START] Start initialization
    initialize();
});
</script>
