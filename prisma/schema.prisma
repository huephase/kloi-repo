datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Customers {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  phone     String?
  createdAt DateTime @default(now()) @db.Timestamp(3)
  orders    kloiOrdersTable[]
  sessions  Session[]
}

model Session {
  id        String   @id @default(uuid())
  user      Customers? @relation(fields: [userId], references: [id])
  userId    String?
  data      Json
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
  // 游리游리游리 - [SESSION REF] Removed orders relation since kloiOrdersTable uses Redis session IDs
}

model Menus {
  id         String   @id @default(uuid())
  name       String
  theme      String
  menuItems  Json
}

// 游리游리游리 - [NEW DATABASE SCHEMA] Updated to match kloiOrdersTable structure
model kloiOrdersTable {
  id             String        @id @default(uuid())
  orderNumber    Int           @unique @default(autoincrement()) @db.Integer
  
  // Customer info (indexed for searching)
  firstName      String        @db.VarChar(20)
  lastName       String        @db.VarChar(20)
  phone          String        @db.VarChar(20)
  email          String?       @db.VarChar(100)
  
  // Location data (JSONB for flexibility)
  location       Json
  
  // Property/delivery details (JSONB for address components)
  eventDetails   Json
  
  // Event date/time (proper timestamp)
  eventDate      DateTime?     @db.Date
  eventTime      DateTime?     @db.Time
  eventDatetime  DateTime?     @db.Timestamptz
  
  // Event setup (JSONB for wizard data)
  eventSetup     Json?
  
  // Order management
  status         String        @default("pending") @db.VarChar(20)
  totalAmount    Decimal?      @db.Decimal(10,2)
  
  // Timestamps
  createdAt      DateTime      @default(now()) @db.Timestamptz
  updatedAt      DateTime      @updatedAt @db.Timestamptz
  
  // Relations
  user           Customers?    @relation(fields: [userId], references: [id])
  userId         String?
  sessionId      String?       // 游리游리游리 - [SESSION REF] Store session ID as string without FK constraint (Redis-based sessions)
  
  // Constraints
  @@map("kloiOrdersTable")
}